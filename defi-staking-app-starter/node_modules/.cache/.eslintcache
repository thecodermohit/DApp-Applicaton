[{"C:\\Users\\acer08022023\\desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\index.js":"1","C:\\Users\\acer08022023\\desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\serviceWorker.js":"2","C:\\Users\\acer08022023\\desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\App.js":"3","C:\\Users\\acer08022023\\desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\Navbar.js":"4","C:\\Users\\acer08022023\\Desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\index.js":"5","C:\\Users\\acer08022023\\Desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\serviceWorker.js":"6","C:\\Users\\acer08022023\\Desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\App.js":"7","C:\\Users\\acer08022023\\Desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\Navbar.js":"8","C:\\Users\\acer08022023\\Desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\Main.js":"9","C:\\Users\\acer08022023\\desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\Main.js":"10"},{"size":483,"mtime":1680522062915,"results":"11","hashOfConfig":"12"},{"size":4951,"mtime":1627066935000,"results":"13","hashOfConfig":"12"},{"size":6092,"mtime":1680624375109,"results":"14","hashOfConfig":"12"},{"size":991,"mtime":1680504506205,"results":"15","hashOfConfig":"12"},{"size":483,"mtime":1680522062915,"results":"16","hashOfConfig":"17"},{"size":4951,"mtime":1627066935000,"results":"18","hashOfConfig":"17"},{"size":5762,"mtime":1680606774785,"results":"19","hashOfConfig":"17"},{"size":991,"mtime":1680504506205,"results":"20","hashOfConfig":"17"},{"size":3272,"mtime":1680607178200,"results":"21","hashOfConfig":"17"},{"size":3355,"mtime":1680624203680,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"spswtr",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"12cdzva",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\acer08022023\\desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\index.js",[],["47","48"],"C:\\Users\\acer08022023\\desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\serviceWorker.js",[],"C:\\Users\\acer08022023\\desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\App.js",["49"],"    import React, {Component} from \"react\";\r\n\r\n    import './App.css'\r\n    import Navbar from \"./Navbar\";\r\n    import Web3 from 'web3'\r\n    import Tether from '../truffle_abis/Tether.json'\r\n    import RWD from '../truffle_abis/RWD.json'\r\n    import DecentralBank from '../truffle_abis/DecentralBank.json'\r\n    import Main from './Main.js'\r\n\r\n    class App extends Component{\r\n        \r\n        async UNSAFE_componentWillMount(){\r\n            await this.loadWeb3()\r\n            await this.loadBlockChainData()\r\n        }\r\n\r\n\r\n        // this function connects to the blockchain\r\n        async loadWeb3(){\r\n            if(window.ethereum){\r\n                window.web3= new Web3(window.ethereum)\r\n                await window.ethereum.enable()\r\n            }else if(window.web3){\r\n                window.web3=new Web3(window.web3.currentProvider)\r\n            }else{\r\n                window.alert('No ethereum detected!! You can go and check out Metamask!!')\r\n            }\r\n        }\r\n\r\n        async loadBlockChainData(){\r\n            const web3 =window.web3\r\n            const account =  await web3.eth.getAccounts()\r\n            this.setState({account:account[0]})\r\n            const networkId = await web3.eth.net.getId()\r\n\r\n            //load tether contract\r\n\r\n            const tetherData=Tether.networks[networkId]\r\n            if(tetherData){\r\n                const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\r\n                this.setState({tether})\r\n\r\n                let tetherBalance =  await tether.methods.balanceof(this.state.account).call()\r\n\r\n                this.setState({tetherBalance: tetherBalance.toString()})\r\n                \r\n            }else{\r\n                window.alert(\"Error!! Tether contract not deployed\")\r\n            }\r\n\r\n            // loading rwd contract\r\n\r\n            const rwdData=RWD.networks[networkId]\r\n            if(rwdData){\r\n                const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\r\n                this.setState({rwd})\r\n\r\n                let rwdBalance =  await rwd.methods.balanceof(this.state.account).call()\r\n\r\n                this.setState({rwdBalance: rwdBalance.toString()})\r\n                \r\n            }else{\r\n                window.alert(\"Error!! RWD contract not deployed\")\r\n            }\r\n\r\n            // loading decentralcontract contract\r\n\r\n            const decentralBankData=DecentralBank.networks[networkId]\r\n            if(decentralBankData){\r\n                const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\r\n                this.setState({decentralBank})\r\n\r\n                let stakingBalance =  await decentralBank.methods.stakingBalance(this.state.account).call()\r\n\r\n                this.setState({stakingBalance: stakingBalance.toString()})\r\n                \r\n            }else{\r\n                window.alert(\"Error!! Decentral contract not deployed\")\r\n            }\r\n\r\n            this.setState({loading: false})\r\n\r\n            \r\n        }\r\n\r\n        //two functions that stake and unstake\r\n        // leverage our decentralBank contract - deposit tokens and unstaking\r\n        // All of this is staking\r\n        // depositTokens transferFrom\r\n        //function approve transaction hash\r\n        //STAKING FUNCTION ?? >> decentralBank.depositTokens(send transactionHash)\r\n\r\n\r\n        // staking function\r\n        stateTokens = (amount) => {\r\n            this.setState({loading: true})\r\n            this.state.tether.methods.approve(this.state.decentralBank._address,amount).send({from: this.state.account}).on('transactionHash',(hash) =>{\r\n            this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash',(hash) =>{\r\n                this.setState({loading: false})\r\n\r\n            })\r\n         })\r\n        }\r\n\r\n        unstakeTokens =()=>{\r\n        this.setState({loading: true})\r\n        this.state.decentralBank.methods.unStakeTokens().send({from: this.state.account}).on('transactionHash',(hash) =>{\r\n            this.setState({loading: false})\r\n        })\r\n        \r\n        }\r\n         \r\n        // issueTokens=()=>{\r\n        //     this.setState({loading: true})\r\n        //     this.state.decentralBank.methods.issueTokens().send({from: this.state.account}).on('transactionHash',(hash) =>{\r\n        //         this.setState({loading: false})\r\n\r\n        //     })\r\n        // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n\r\n        constructor(props){\r\n            super(props)\r\n            this.state={\r\n                account:'0x0',\r\n                tether: {},\r\n                rwd:{},\r\n                decentralBank:{},\r\n                tetherBalance:'0',\r\n                rwdBalance:'0',\r\n                stakingBalance:'0',\r\n                loading:true \r\n\r\n            }\r\n\r\n        }\r\n\r\n            render(){\r\n                let content \r\n                {this.state.loading ?content= \r\n                <p id='loader' className=\"text-center\" style={{margin:'30px'}}>\r\n                Loading Please......</p> : content =\r\n                <Main\r\n                tetherBalance={this.state.tetherBalance}\r\n                rwdBalance={this.state.rwdBalance}\r\n                stakingBalance={this.state.stakingBalance}\r\n                stateTokens={this.stateTokens}\r\n                unstakeTokens={this.unstakeTokens}\r\n                issueTokens={this.issueTokens}\r\n\r\n\r\n                /> }\r\n                return(\r\n                <div>\r\n                <Navbar account={this.state.account}/>\r\n                    <div className=\"container-fluid mt-5\">\r\n                        <div className=\"row\">\r\n                            <mian role='main' className=\"col-lg-12 ml-auto mr-auto\" style={{maxWidth:'600px',minHeight:\"100vm\"}}>\r\n                                <div>\r\n                                    {content}\r\n                                </div>\r\n                            </mian>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                \r\n                \r\n                </div>\r\n                )\r\n            }\r\n    }\r\n    export default App;","C:\\Users\\acer08022023\\desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\Navbar.js",["50","51"],"import React, {Component} from \"react\";\r\nimport bank from '../bank.png'\r\n\r\nclass Navbar extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <nav className=\"navbar navbar-dark fixed-top shadow p-0\" style={{backgroundColor:'black', height:'50px'}}>\r\n                <a className=\"navbar-brand col-sm-3 col-md-2 mr-0 \" \r\n                style={{color:'white'}}> \r\n                <img src={bank} width='50' height='30' className=\"d-inline-block align\" alt='bank image' /> &nbsp;\r\n                DAPP Yield Staking (Decentralized Banking)\r\n                </a>\r\n                <ul className='navbar-nav px-3'>\r\n                    <li className=\"text-nowrap d-none nav-item d-sm-none d-sm-block\">\r\n                        <small id=\"\" style={{color:'white'}}>ACCOUNT NUMBER:{this.props.account}\r\n                              \r\n                        </small>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\acer08022023\\Desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\index.js",[],["52","53"],"C:\\Users\\acer08022023\\Desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\serviceWorker.js",[],"C:\\Users\\acer08022023\\Desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\App.js",["54"],"C:\\Users\\acer08022023\\Desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\Navbar.js",["55","56"],"C:\\Users\\acer08022023\\Desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\Main.js",[],"C:\\Users\\acer08022023\\desktop\\defi-staking-app-starter-main\\defi-staking-app-starter\\src\\components\\Main.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":149,"column":17,"nodeType":"63","messageId":"64","endLine":161,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":9,"column":17,"nodeType":"67","endLine":10,"endColumn":41},{"ruleId":"68","severity":1,"message":"69","line":11,"column":17,"nodeType":"67","endLine":11,"endColumn":108},{"ruleId":"57","replacedBy":"70"},{"ruleId":"59","replacedBy":"71"},{"ruleId":"61","severity":1,"message":"62","line":143,"column":17,"nodeType":"63","messageId":"64","endLine":154,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":9,"column":17,"nodeType":"67","endLine":10,"endColumn":41},{"ruleId":"68","severity":1,"message":"69","line":11,"column":17,"nodeType":"67","endLine":11,"endColumn":108},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["72"],["73"],"no-global-assign","no-unsafe-negation"]