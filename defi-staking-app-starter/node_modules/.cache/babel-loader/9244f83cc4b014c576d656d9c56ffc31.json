{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file ENS.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\n\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _ = require('underscore');\nvar config = require('./config');\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar Registry = require('./contracts/Registry');\nvar ResolverMethodHandler = require('./lib/ResolverMethodHandler');\nvar contenthash = require('./lib/contentHash');\n\n/**\n * Constructs a new instance of ENS\n *\n * @param {Eth} eth\n *\n * @constructor\n */\nfunction ENS(eth) {\n  this.eth = eth;\n  var registryAddress = null;\n  this._detectedAddress = null;\n  this._lastSyncCheck = null;\n  Object.defineProperty(this, 'registry', {\n    get: function get() {\n      return new Registry(this);\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'resolverMethodHandler', {\n    get: function get() {\n      return new ResolverMethodHandler(this.registry);\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'registryAddress', {\n    get: function get() {\n      return registryAddress;\n    },\n    set: function set(value) {\n      if (value === null) {\n        registryAddress = value;\n        return;\n      }\n      registryAddress = formatters.inputAddressFormatter(value);\n    },\n    enumerable: true\n  });\n}\n\n/**\n * Returns true if the given interfaceId is supported and otherwise false.\n *\n * @method supportsInterface\n *\n * @param {string} name\n * @param {string} interfaceId\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.supportsInterface = function (name, interfaceId, callback) {\n  return this.getResolver(name).then(function (resolver) {\n    if (!utils.isHexStrict(interfaceId)) {\n      interfaceId = utils.sha3(interfaceId).slice(0, 10);\n    }\n    return resolver.methods.supportsInterface(interfaceId).call(callback);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    throw error;\n  });\n};\n\n/**\n * Returns the Resolver by the given address\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nENS.prototype.resolver = function (name, callback) {\n  return this.registry.resolver(name, callback);\n};\n\n/**\n * Returns the Resolver by the given address\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nENS.prototype.getResolver = function (name, callback) {\n  return this.registry.getResolver(name, callback);\n};\n\n/**\n * Does set the resolver of the given name\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setResolver = function (name, address, txConfig, callback) {\n  return this.registry.setResolver(name, address, txConfig, callback);\n};\n\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n  return this.registry.setRecord(name, owner, resolver, ttl, txConfig, callback);\n};\n\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n  return this.registry.setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, callback);\n};\n\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n  return this.registry.setApprovalForAll(operator, approved, txConfig, callback);\n};\n\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.isApprovedForAll = function (owner, operator, callback) {\n  return this.registry.isApprovedForAll(owner, operator, callback);\n};\n\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.recordExists = function (name, callback) {\n  return this.registry.recordExists(name, callback);\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n  return this.registry.setSubnodeOwner(name, label, address, txConfig, callback);\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getTTL = function (name, callback) {\n  return this.registry.getTTL(name, callback);\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setTTL = function (name, ttl, txConfig, callback) {\n  return this.registry.setTTL(name, ttl, txConfig, callback);\n};\n\n/**\n * Returns the owner by the given name and current configured or detected Registry\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getOwner = function (name, callback) {\n  return this.registry.getOwner(name, callback);\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setOwner = function (name, address, txConfig, callback) {\n  return this.registry.setOwner(name, address, txConfig, callback);\n};\n\n/**\n * Returns the address record associated with a name.\n *\n * @method getAddress\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getAddress = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'addr', []).call(callback);\n};\n\n/**\n * Sets a new address\n *\n * @method setAddress\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setAddress = function (name, address, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(txConfig, callback);\n};\n\n/**\n * Returns the public key\n *\n * @method getPubkey\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getPubkey = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'pubkey', [], null, callback).call(callback);\n};\n\n/**\n * Set the new public key\n *\n * @method setPubkey\n *\n * @param {string} name\n * @param {string} x\n * @param {string} y\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setPubkey = function (name, x, y, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(txConfig, callback);\n};\n\n/**\n * Returns the content\n *\n * @method getContent\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getContent = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'content', []).call(callback);\n};\n\n/**\n * Set the content\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setContent = function (name, hash, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(txConfig, callback);\n};\n\n/**\n * Returns the contenthash\n *\n * @method getContenthash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<ContentHash>}\n */\nENS.prototype.getContenthash = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'contenthash', [], contenthash.decode).call(callback);\n};\n\n/**\n * Set the contenthash\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setContenthash = function (name, hash, txConfig, callback) {\n  var encoded;\n  try {\n    encoded = contenthash.encode(hash);\n  } catch (err) {\n    var error = new Error('Could not encode ' + hash + '. See docs for supported hash protocols.');\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    throw error;\n  }\n  return this.resolverMethodHandler.method(name, 'setContenthash', [encoded]).send(txConfig, callback);\n};\n\n/**\n * Get the multihash\n *\n * @method getMultihash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getMultihash = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);\n};\n\n/**\n * Set the multihash\n *\n * @method setMultihash\n *\n * @param {string} name\n * @param {string} hash\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setMultihash = function (name, hash, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(txConfig, callback);\n};\n\n/**\n * Checks if the current used network is synced and looks for ENS support there.\n * Throws an error if not.\n *\n * @returns {Promise<string>}\n */\nENS.prototype.checkNetwork = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n  var now, block, headAge, networkType, addr;\n  return _regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        now = new Date() / 1000;\n        if (!(!this._lastSyncCheck || now - this._lastSyncCheck > 3600)) {\n          _context.next = 9;\n          break;\n        }\n        _context.next = 4;\n        return this.eth.getBlock('latest');\n      case 4:\n        block = _context.sent;\n        headAge = now - block.timestamp;\n        if (!(headAge > 3600)) {\n          _context.next = 8;\n          break;\n        }\n        throw new Error(\"Network not synced; last block was \" + headAge + \" seconds ago\");\n      case 8:\n        this._lastSyncCheck = now;\n      case 9:\n        if (!this.registryAddress) {\n          _context.next = 11;\n          break;\n        }\n        return _context.abrupt(\"return\", this.registryAddress);\n      case 11:\n        if (this._detectedAddress) {\n          _context.next = 20;\n          break;\n        }\n        _context.next = 14;\n        return this.eth.net.getNetworkType();\n      case 14:\n        networkType = _context.sent;\n        addr = config.addresses[networkType];\n        if (!(typeof addr === 'undefined')) {\n          _context.next = 18;\n          break;\n        }\n        throw new Error(\"ENS is not supported on network \" + networkType);\n      case 18:\n        this._detectedAddress = addr;\n        return _context.abrupt(\"return\", this._detectedAddress);\n      case 20:\n        return _context.abrupt(\"return\", this._detectedAddress);\n      case 21:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _callee, this);\n}));\nmodule.exports = ENS;","map":{"version":3,"names":["_regeneratorRuntime","require","default","_asyncToGenerator","_","config","formatters","utils","Registry","ResolverMethodHandler","contenthash","ENS","eth","registryAddress","_detectedAddress","_lastSyncCheck","Object","defineProperty","get","enumerable","registry","set","value","inputAddressFormatter","prototype","supportsInterface","name","interfaceId","callback","getResolver","then","resolver","isHexStrict","sha3","slice","methods","call","catch","error","isFunction","setResolver","address","txConfig","setRecord","owner","ttl","setSubnodeRecord","label","setApprovalForAll","operator","approved","isApprovedForAll","recordExists","setSubnodeOwner","getTTL","setTTL","getOwner","setOwner","getAddress","resolverMethodHandler","method","setAddress","send","getPubkey","setPubkey","x","y","getContent","setContent","hash","getContenthash","decode","setContenthash","encoded","encode","err","Error","getMultihash","setMultihash","checkNetwork","mark","_callee","now","block","headAge","networkType","addr","wrap","_callee$","_context","prev","next","Date","getBlock","sent","timestamp","abrupt","net","getNetworkType","addresses","stop","module","exports"],"sources":["C:/Users/acer08022023/desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/web3-eth-ens/src/ENS.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file ENS.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar config = require('./config');\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar Registry = require('./contracts/Registry');\nvar ResolverMethodHandler = require('./lib/ResolverMethodHandler');\nvar contenthash = require('./lib/contentHash');\n\n/**\n * Constructs a new instance of ENS\n *\n * @param {Eth} eth\n *\n * @constructor\n */\nfunction ENS(eth) {\n    this.eth = eth;\n    var registryAddress = null;\n    this._detectedAddress = null;\n    this._lastSyncCheck = null;\n\n    Object.defineProperty(this, 'registry', {\n        get: function () {\n            return new Registry(this);\n        },\n        enumerable: true\n    });\n\n    Object.defineProperty(this, 'resolverMethodHandler', {\n        get: function () {\n            return new ResolverMethodHandler(this.registry);\n        },\n        enumerable: true\n    });\n\n    Object.defineProperty(this, 'registryAddress', {\n        get: function () {\n            return registryAddress;\n        },\n        set: function (value) {\n            if (value === null) {\n                registryAddress = value;\n\n                return;\n            }\n\n            registryAddress = formatters.inputAddressFormatter(value);\n        },\n        enumerable: true\n    });\n}\n\n/**\n * Returns true if the given interfaceId is supported and otherwise false.\n *\n * @method supportsInterface\n *\n * @param {string} name\n * @param {string} interfaceId\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.supportsInterface = function (name, interfaceId, callback) {\n    return this.getResolver(name).then(function (resolver) {\n        if (!utils.isHexStrict(interfaceId)) {\n            interfaceId = utils.sha3(interfaceId).slice(0,10);\n        }\n\n        return resolver.methods.supportsInterface(interfaceId).call(callback);\n    }).catch(function(error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        throw error;\n    });\n};\n\n/**\n * Returns the Resolver by the given address\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nENS.prototype.resolver = function (name, callback) {\n    return this.registry.resolver(name, callback);\n};\n\n/**\n * Returns the Resolver by the given address\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nENS.prototype.getResolver = function (name, callback) {\n    return this.registry.getResolver(name, callback);\n};\n\n/**\n * Does set the resolver of the given name\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setResolver = function (name, address, txConfig, callback) {\n    return this.registry.setResolver(name, address, txConfig, callback);\n};\n\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n    return this.registry.setRecord(name, owner, resolver, ttl, txConfig, callback);\n};\n\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n    return this.registry.setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, callback);\n};\n\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n    return this.registry.setApprovalForAll(operator, approved, txConfig, callback);\n};\n\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.isApprovedForAll = function (owner, operator, callback) {\n    return this.registry.isApprovedForAll(owner, operator, callback);\n};\n\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.recordExists = function (name, callback) {\n    return this.registry.recordExists(name, callback);\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n    return this.registry.setSubnodeOwner(name, label, address, txConfig, callback);\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getTTL = function (name, callback) {\n    return this.registry.getTTL(name, callback);\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setTTL = function (name, ttl, txConfig, callback) {\n    return this.registry.setTTL(name, ttl, txConfig, callback);\n};\n\n/**\n * Returns the owner by the given name and current configured or detected Registry\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getOwner = function (name, callback) {\n    return this.registry.getOwner(name, callback);\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setOwner = function (name, address, txConfig, callback) {\n    return this.registry.setOwner(name, address, txConfig, callback);\n};\n\n/**\n * Returns the address record associated with a name.\n *\n * @method getAddress\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getAddress = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'addr', []).call(callback);\n};\n\n/**\n * Sets a new address\n *\n * @method setAddress\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setAddress = function (name, address, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(txConfig, callback);\n};\n\n/**\n * Returns the public key\n *\n * @method getPubkey\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getPubkey = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'pubkey', [], null, callback).call(callback);\n};\n\n/**\n * Set the new public key\n *\n * @method setPubkey\n *\n * @param {string} name\n * @param {string} x\n * @param {string} y\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setPubkey = function (name, x, y, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(txConfig, callback);\n};\n\n/**\n * Returns the content\n *\n * @method getContent\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getContent = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'content', []).call(callback);\n};\n\n/**\n * Set the content\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setContent = function (name, hash, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(txConfig, callback);\n};\n\n/**\n * Returns the contenthash\n *\n * @method getContenthash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<ContentHash>}\n */\nENS.prototype.getContenthash = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'contenthash', [], contenthash.decode).call(callback);\n};\n\n/**\n * Set the contenthash\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setContenthash = function (name, hash, txConfig, callback) {\n    var encoded;\n    try {\n        encoded = contenthash.encode(hash);\n    } catch(err){\n        var error = new Error('Could not encode ' + hash + '. See docs for supported hash protocols.');\n\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        throw error;\n    }\n    return this.resolverMethodHandler.method(name, 'setContenthash', [encoded]).send(txConfig, callback);\n};\n\n/**\n * Get the multihash\n *\n * @method getMultihash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getMultihash = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);\n};\n\n/**\n * Set the multihash\n *\n * @method setMultihash\n *\n * @param {string} name\n * @param {string} hash\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setMultihash = function (name, hash, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(txConfig, callback);\n};\n\n/**\n * Checks if the current used network is synced and looks for ENS support there.\n * Throws an error if not.\n *\n * @returns {Promise<string>}\n */\nENS.prototype.checkNetwork = async function () {\n    var now = new Date() / 1000;\n\n    if (!this._lastSyncCheck || (now - this._lastSyncCheck) > 3600) {\n        var block = await this.eth.getBlock('latest');\n        var headAge = now - block.timestamp;\n\n        if (headAge > 3600) {\n            throw new Error(\"Network not synced; last block was \" + headAge + \" seconds ago\");\n        }\n\n        this._lastSyncCheck = now;\n    }\n\n    if (this.registryAddress) {\n        return this.registryAddress;\n    }\n\n    if (!this._detectedAddress) {\n        var networkType = await this.eth.net.getNetworkType();\n        var addr = config.addresses[networkType];\n\n        if (typeof addr === 'undefined') {\n            throw new Error(\"ENS is not supported on network \" + networkType);\n        }\n\n        this._detectedAddress = addr;\n\n        return this._detectedAddress;\n    }\n\n    return this._detectedAddress;\n};\n\nmodule.exports = ENS;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}