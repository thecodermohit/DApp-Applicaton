{"ast":null,"code":"\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport _classCallCheck from \"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nvar paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nvar paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport var AbiCoder = /*#__PURE__*/function () {\n  function AbiCoder(coerceFunc) {\n    _classCallCheck(this, AbiCoder);\n    logger.checkNew(this instanceof AbiCoder ? this.constructor : void 0, AbiCoder);\n    defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n  }\n  _createClass(AbiCoder, [{\n    key: \"_getCoder\",\n    value: function _getCoder(param) {\n      var _this = this;\n      switch (param.baseType) {\n        case \"address\":\n          return new AddressCoder(param.name);\n        case \"bool\":\n          return new BooleanCoder(param.name);\n        case \"string\":\n          return new StringCoder(param.name);\n        case \"bytes\":\n          return new BytesCoder(param.name);\n        case \"array\":\n          return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n        case \"tuple\":\n          return new TupleCoder((param.components || []).map(function (component) {\n            return _this._getCoder(component);\n          }), param.name);\n        case \"\":\n          return new NullCoder(param.name);\n      }\n      // u?int[0-9]*\n      var match = param.type.match(paramTypeNumber);\n      if (match) {\n        var size = parseInt(match[2] || \"256\");\n        if (size === 0 || size > 256 || size % 8 !== 0) {\n          logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n        }\n        return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n      }\n      // bytes[0-9]+\n      match = param.type.match(paramTypeBytes);\n      if (match) {\n        var _size = parseInt(match[1]);\n        if (_size === 0 || _size > 32) {\n          logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n        }\n        return new FixedBytesCoder(_size, param.name);\n      }\n      return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n  }, {\n    key: \"_getWordSize\",\n    value: function _getWordSize() {\n      return 32;\n    }\n  }, {\n    key: \"_getReader\",\n    value: function _getReader(data) {\n      return new Reader(data, this._getWordSize(), this.coerceFunc);\n    }\n  }, {\n    key: \"_getWriter\",\n    value: function _getWriter() {\n      return new Writer(this._getWordSize());\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(types, values) {\n      var _this2 = this;\n      if (types.length !== values.length) {\n        logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          count: {\n            types: types.length,\n            values: values.length\n          },\n          value: {\n            types: types,\n            values: values\n          }\n        });\n      }\n      var coders = types.map(function (type) {\n        return _this2._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      var writer = this._getWriter();\n      coder.encode(writer, values);\n      return writer.data;\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(types, data) {\n      var _this3 = this;\n      var coders = types.map(function (type) {\n        return _this3._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.decode(this._getReader(arrayify(data)));\n    }\n  }]);\n  return AbiCoder;\n}();\nexport var defaultAbiCoder = new AbiCoder();","map":{"version":3,"names":["_classCallCheck","_createClass","arrayify","defineReadOnly","Logger","version","logger","Reader","Writer","AddressCoder","ArrayCoder","BooleanCoder","BytesCoder","FixedBytesCoder","NullCoder","NumberCoder","StringCoder","TupleCoder","ParamType","paramTypeBytes","RegExp","paramTypeNumber","AbiCoder","coerceFunc","checkNew","constructor","key","value","_getCoder","param","_this","baseType","name","arrayChildren","arrayLength","components","map","component","match","type","size","parseInt","throwArgumentError","_getWordSize","_getReader","data","_getWriter","encode","types","values","_this2","length","throwError","errors","INVALID_ARGUMENT","count","coders","from","coder","writer","decode","_this3","defaultAbiCoder"],"sources":["C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/web3-eth/node_modules/@ethersproject/abi/lib.esm/abi-coder.js"],"sourcesContent":["\"use strict\";\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n    constructor(coerceFunc) {\n        logger.checkNew(new.target, AbiCoder);\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n    _getCoder(param) {\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n    _getWordSize() { return 32; }\n    _getReader(data) {\n        return new Reader(data, this._getWordSize(), this.coerceFunc);\n    }\n    _getWriter() {\n        return new Writer(this._getWordSize());\n    }\n    encode(types, values) {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    decode(types, data) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data)));\n    }\n}\nexport const defaultAbiCoder = new AbiCoder();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}