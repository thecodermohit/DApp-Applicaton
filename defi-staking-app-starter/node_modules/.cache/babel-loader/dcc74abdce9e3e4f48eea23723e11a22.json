{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Coder } from \"./abstract-coder\";\n// Clones the functionality of an existing Coder, but without a localName\nexport var AnonymousCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(AnonymousCoder, _Coder);\n  var _super = _createSuper(AnonymousCoder);\n  function AnonymousCoder(coder) {\n    var _this;\n    _classCallCheck(this, AnonymousCoder);\n    _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic);\n    _this.coder = coder;\n    return _this;\n  }\n  _createClass(AnonymousCoder, [{\n    key: \"encode\",\n    value: function encode(writer, value) {\n      return this.coder.encode(writer, value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      return this.coder.decode(reader);\n    }\n  }]);\n  return AnonymousCoder;\n}(Coder);","map":{"version":3,"names":["_classCallCheck","_createClass","_inherits","_createSuper","Coder","AnonymousCoder","_Coder","_super","coder","_this","call","name","type","undefined","dynamic","key","value","encode","writer","decode","reader"],"sources":["C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/web3-eth-contract/node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js"],"sourcesContent":["\"use strict\";\nimport { Coder } from \"./abstract-coder\";\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    constructor(coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n"],"mappings":"AAAA,YAAY;;AAAC,OAAAA,eAAA;AAAA,OAAAC,YAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,YAAA;AACb,SAASC,KAAK,QAAQ,kBAAkB;AACxC;AACA,WAAaC,cAAc,0BAAAC,MAAA;EAAAJ,SAAA,CAAAG,cAAA,EAAAC,MAAA;EAAA,IAAAC,MAAA,GAAAJ,YAAA,CAAAE,cAAA;EACvB,SAAAA,eAAYG,KAAK,EAAE;IAAA,IAAAC,KAAA;IAAAT,eAAA,OAAAK,cAAA;IACfI,KAAA,GAAAF,MAAA,CAAAG,IAAA,OAAMF,KAAK,CAACG,IAAI,EAAEH,KAAK,CAACI,IAAI,EAAEC,SAAS,EAAEL,KAAK,CAACM,OAAO;IACtDL,KAAA,CAAKD,KAAK,GAAGA,KAAK;IAAC,OAAAC,KAAA;EACvB;EAACR,YAAA,CAAAI,cAAA;IAAAU,GAAA;IAAAC,KAAA,EACD,SAAAC,OAAOC,MAAM,EAAEF,KAAK,EAAE;MAClB,OAAO,IAAI,CAACR,KAAK,CAACS,MAAM,CAACC,MAAM,EAAEF,KAAK,CAAC;IAC3C;EAAC;IAAAD,GAAA;IAAAC,KAAA,EACD,SAAAG,OAAOC,MAAM,EAAE;MACX,OAAO,IAAI,CAACZ,KAAK,CAACW,MAAM,CAACC,MAAM,CAAC;IACpC;EAAC;EAAA,OAAAf,cAAA;AAAA,EAV+BD,KAAK"},"metadata":{},"sourceType":"module"}