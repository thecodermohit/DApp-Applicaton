{"ast":null,"code":"\"use strict\";\n\nimport _createClass from \"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/acer08022023/Desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getAddress as _getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport { checkResultErrors };\nexport var LogDescription = /*#__PURE__*/function (_Description) {\n  _inherits(LogDescription, _Description);\n  var _super = _createSuper(LogDescription);\n  function LogDescription() {\n    _classCallCheck(this, LogDescription);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(LogDescription);\n}(Description);\nexport var TransactionDescription = /*#__PURE__*/function (_Description2) {\n  _inherits(TransactionDescription, _Description2);\n  var _super2 = _createSuper(TransactionDescription);\n  function TransactionDescription() {\n    _classCallCheck(this, TransactionDescription);\n    return _super2.apply(this, arguments);\n  }\n  return _createClass(TransactionDescription);\n}(Description);\nexport var Indexed = /*#__PURE__*/function (_Description3) {\n  _inherits(Indexed, _Description3);\n  var _super3 = _createSuper(Indexed);\n  function Indexed() {\n    _classCallCheck(this, Indexed);\n    return _super3.apply(this, arguments);\n  }\n  _createClass(Indexed, null, [{\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return !!(value && value._isIndexed);\n    }\n  }]);\n  return Indexed;\n}(Description);\nfunction wrapAccessError(property, error) {\n  var wrap = new Error(\"deferred error during ABI decoding triggered accessing \".concat(property));\n  wrap.error = error;\n  return wrap;\n}\nfunction checkNames(fragment, type, params) {\n  params.reduce(function (accum, param) {\n    if (param.name) {\n      if (accum[param.name]) {\n        logger.throwArgumentError(\"duplicate \".concat(type, \" parameter \").concat(JSON.stringify(param.name), \" in \").concat(fragment.format(\"full\")), \"fragment\", fragment);\n      }\n      accum[param.name] = true;\n    }\n    return accum;\n  }, {});\n}\nexport var Interface = /*#__PURE__*/function () {\n  function Interface(fragments) {\n    var _this = this;\n    _classCallCheck(this, Interface);\n    logger.checkNew(this instanceof Interface ? this.constructor : void 0, Interface);\n    var abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n      return Fragment.from(fragment);\n    }).filter(function (fragment) {\n      return fragment != null;\n    }));\n    defineReadOnly(this, \"_abiCoder\", getStatic(this instanceof Interface ? this.constructor : void 0, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(function (fragment) {\n      var bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (_this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(_this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          checkNames(fragment, \"input\", fragment.inputs);\n          checkNames(fragment, \"output\", fragment.outputs);\n          bucket = _this.functions;\n          break;\n        case \"event\":\n          checkNames(fragment, \"input\", fragment.inputs);\n          bucket = _this.events;\n          break;\n        default:\n          return;\n      }\n      var signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  _createClass(Interface, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.full;\n      }\n      if (_format === FormatTypes.sighash) {\n        logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", _format);\n      }\n      var abi = this.fragments.map(function (fragment) {\n        return fragment.format(_format);\n      });\n      // We need to re-bundle the JSON fragments a bit\n      if (_format === FormatTypes.json) {\n        return JSON.stringify(abi.map(function (j) {\n          return JSON.parse(j);\n        }));\n      }\n      return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n  }, {\n    key: \"getFunction\",\n    value:\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    function getFunction(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        for (var name in this.functions) {\n          if (nameOrSignatureOrSighash === this.getSighash(name)) {\n            return this.functions[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name = nameOrSignatureOrSighash.trim();\n        var matching = Object.keys(this.functions).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching function\", \"name\", _name);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching functions\", \"name\", _name);\n        }\n        return this.functions[matching[0]];\n      }\n      // Normlize the signature and lookup the function\n      var result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n      }\n      return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n  }, {\n    key: \"getEvent\",\n    value: function getEvent(nameOrSignatureOrTopic) {\n      if (isHexString(nameOrSignatureOrTopic)) {\n        var topichash = nameOrSignatureOrTopic.toLowerCase();\n        for (var name in this.events) {\n          if (topichash === this.getEventTopic(name)) {\n            return this.events[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n        var _name2 = nameOrSignatureOrTopic.trim();\n        var matching = Object.keys(this.events).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name2;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching event\", \"name\", _name2);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching events\", \"name\", _name2);\n        }\n        return this.events[matching[0]];\n      }\n      // Normlize the signature and lookup the function\n      var result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n      }\n      return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(functionFragment) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      return getStatic(this.constructor, \"getSighash\")(functionFragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n  }, {\n    key: \"_decodeParams\",\n    value: function _decodeParams(params, data) {\n      return this._abiCoder.decode(params, data);\n    }\n  }, {\n    key: \"_encodeParams\",\n    value: function _encodeParams(params, values) {\n      return this._abiCoder.encode(params, values);\n    }\n  }, {\n    key: \"encodeDeploy\",\n    value: function encodeDeploy(values) {\n      return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    // Decode the data for a function call (e.g. tx.data)\n  }, {\n    key: \"decodeFunctionData\",\n    value: function decodeFunctionData(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      var bytes = arrayify(data);\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n        logger.throwArgumentError(\"data signature does not match function \".concat(functionFragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n      return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n  }, {\n    key: \"encodeFunctionData\",\n    value: function encodeFunctionData(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n  }, {\n    key: \"decodeFunctionResult\",\n    value: function decodeFunctionResult(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      var bytes = arrayify(data);\n      var reason = null;\n      var errorSignature = null;\n      switch (bytes.length % this._abiCoder._getWordSize()) {\n        case 0:\n          try {\n            return this._abiCoder.decode(functionFragment.outputs, bytes);\n          } catch (error) {}\n          break;\n        case 4:\n          if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n            errorSignature = \"Error(string)\";\n            reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n          }\n          break;\n      }\n      return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n        method: functionFragment.format(),\n        errorSignature: errorSignature,\n        errorArgs: [reason],\n        reason: reason\n      });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n  }, {\n    key: \"encodeFunctionResult\",\n    value: function encodeFunctionResult(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  }, {\n    key: \"encodeFilterTopics\",\n    value: function encodeFilterTopics(eventFragment, values) {\n      var _this2 = this;\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      if (values.length > eventFragment.inputs.length) {\n        logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n          argument: \"values\",\n          value: values\n        });\n      }\n      var topics = [];\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n      var encodeTopic = function encodeTopic(param, value) {\n        if (param.type === \"string\") {\n          return id(value);\n        } else if (param.type === \"bytes\") {\n          return keccak256(hexlify(value));\n        }\n        // Check addresses are valid\n        if (param.type === \"address\") {\n          _this2._abiCoder.encode([\"address\"], [value]);\n        }\n        return hexZeroPad(hexlify(value), 32);\n      };\n      values.forEach(function (value, index) {\n        var param = eventFragment.inputs[index];\n        if (!param.indexed) {\n          if (value != null) {\n            logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n          }\n          return;\n        }\n        if (value == null) {\n          topics.push(null);\n        } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n          logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n        } else if (Array.isArray(value)) {\n          topics.push(value.map(function (value) {\n            return encodeTopic(param, value);\n          }));\n        } else {\n          topics.push(encodeTopic(param, value));\n        }\n      });\n      // Trim off trailing nulls\n      while (topics.length && topics[topics.length - 1] === null) {\n        topics.pop();\n      }\n      return topics;\n    }\n  }, {\n    key: \"encodeEventLog\",\n    value: function encodeEventLog(eventFragment, values) {\n      var _this3 = this;\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      var topics = [];\n      var dataTypes = [];\n      var dataValues = [];\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n      if (values.length !== eventFragment.inputs.length) {\n        logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n      }\n      eventFragment.inputs.forEach(function (param, index) {\n        var value = values[index];\n        if (param.indexed) {\n          if (param.type === \"string\") {\n            topics.push(id(value));\n          } else if (param.type === \"bytes\") {\n            topics.push(keccak256(value));\n          } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n            // @TOOD\n            throw new Error(\"not implemented\");\n          } else {\n            topics.push(_this3._abiCoder.encode([param.type], [value]));\n          }\n        } else {\n          dataTypes.push(param);\n          dataValues.push(value);\n        }\n      });\n      return {\n        data: this._abiCoder.encode(dataTypes, dataValues),\n        topics: topics\n      };\n    }\n    // Decode a filter for the event and the search criteria\n  }, {\n    key: \"decodeEventLog\",\n    value: function decodeEventLog(eventFragment, data, topics) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      if (topics != null && !eventFragment.anonymous) {\n        var topicHash = this.getEventTopic(eventFragment);\n        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n          logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"topics[0]\",\n            expected: topicHash,\n            value: topics[0]\n          });\n        }\n        topics = topics.slice(1);\n      }\n      var indexed = [];\n      var nonIndexed = [];\n      var dynamic = [];\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n            indexed.push(ParamType.fromObject({\n              type: \"bytes32\",\n              name: param.name\n            }));\n            dynamic.push(true);\n          } else {\n            indexed.push(param);\n            dynamic.push(false);\n          }\n        } else {\n          nonIndexed.push(param);\n          dynamic.push(false);\n        }\n      });\n      var resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n      var resultNonIndexed = this._abiCoder.decode(nonIndexed, data);\n      var result = [];\n      var nonIndexedIndex = 0,\n        indexedIndex = 0;\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (resultIndexed == null) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: null\n            });\n          } else if (dynamic[index]) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: resultIndexed[indexedIndex++]\n            });\n          } else {\n            try {\n              result[index] = resultIndexed[indexedIndex++];\n            } catch (error) {\n              result[index] = error;\n            }\n          }\n        } else {\n          try {\n            result[index] = resultNonIndexed[nonIndexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n        // Add the keyword argument if named and safe\n        if (param.name && result[param.name] == null) {\n          var value = result[index];\n          // Make error named values throw on access\n          if (value instanceof Error) {\n            Object.defineProperty(result, param.name, {\n              get: function get() {\n                throw wrapAccessError(\"property \".concat(JSON.stringify(param.name)), value);\n              }\n            });\n          } else {\n            result[param.name] = value;\n          }\n        }\n      });\n      // Make all error indexed values throw on access\n      var _loop = function _loop(i) {\n        var value = result[i];\n        if (value instanceof Error) {\n          Object.defineProperty(result, i, {\n            get: function get() {\n              throw wrapAccessError(\"index \".concat(i), value);\n            }\n          });\n        }\n      };\n      for (var i = 0; i < result.length; i++) {\n        _loop(i);\n      }\n      return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n  }, {\n    key: \"parseTransaction\",\n    value: function parseTransaction(tx) {\n      var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n      if (!fragment) {\n        return null;\n      }\n      return new TransactionDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n        functionFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment),\n        value: BigNumber.from(tx.value || \"0\")\n      });\n    }\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n  }, {\n    key: \"parseLog\",\n    value: function parseLog(log) {\n      var fragment = this.getEvent(log.topics[0]);\n      if (!fragment || fragment.anonymous) {\n        return null;\n      }\n      // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n      //        Probably not, because just because it is the only event in the ABI does\n      //        not mean we have the full ABI; maybe jsut a fragment?\n      return new LogDescription({\n        eventFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        topic: this.getEventTopic(fragment),\n        args: this.decodeEventLog(fragment, log.data, log.topics)\n      });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n  }], [{\n    key: \"getAbiCoder\",\n    value: function getAbiCoder() {\n      return defaultAbiCoder;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(address) {\n      return _getAddress(address);\n    }\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(functionFragment) {\n      return hexDataSlice(id(functionFragment.format()), 0, 4);\n    }\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      return id(eventFragment.format());\n    }\n  }, {\n    key: \"isInterface\",\n    value: function isInterface(value) {\n      return !!(value && value._isInterface);\n    }\n  }]);\n  return Interface;\n}();","map":{"version":3,"names":["_createClass","_classCallCheck","_inherits","_createSuper","getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","_Description","_super","apply","arguments","TransactionDescription","_Description2","_super2","Indexed","_Description3","_super3","key","value","isIndexed","_isIndexed","wrapAccessError","property","error","wrap","Error","checkNames","fragment","type","params","reduce","accum","param","name","throwArgumentError","JSON","stringify","format","Interface","fragments","_this","checkNew","constructor","abi","parse","map","from","filter","forEach","bucket","deploy","warn","inputs","outputs","functions","events","signature","payable","full","sighash","json","j","getFunction","nameOrSignatureOrSighash","getSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","functionFragment","eventFragment","_decodeParams","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","decodeFunctionData","bytes","slice","encodeFunctionData","decodeFunctionResult","reason","errorSignature","_getWordSize","throwError","errors","CALL_EXCEPTION","method","errorArgs","encodeFunctionResult","encodeFilterTopics","_this2","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","index","indexed","baseType","Array","isArray","pop","encodeEventLog","_this3","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","get","_loop","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","getAbiCoder","address","isInterface","_isInterface"],"sources":["C:/Users/acer08022023/desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/web3-eth/node_modules/@ethersproject/abi/lib.esm/interface.js"],"sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\nfunction checkNames(fragment, type, params) {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${type} parameter ${JSON.stringify(param.name)} in ${fragment.format(\"full\")}`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, {});\n}\nexport class Interface {\n    constructor(fragments) {\n        logger.checkNew(new.target, Interface);\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic((new.target), \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    checkNames(fragment, \"output\", fragment.outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(functionFragment) {\n        return hexDataSlice(id(functionFragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(functionFragment) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return getStatic(this.constructor, \"getSighash\")(functionFragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4:\n                if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n                    errorSignature = \"Error(string)\";\n                    reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                }\n                break;\n        }\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorSignature: errorSignature,\n            errorArgs: [reason],\n            reason: reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TOOD\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe jsut a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}