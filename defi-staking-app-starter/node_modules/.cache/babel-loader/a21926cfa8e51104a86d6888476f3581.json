{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n\nvar _require = require('buffer'),\n  Buffer = _require.Buffer;\nvar varint = require('varint');\nvar intTable = require('./int-table');\nvar codecNameToCodeVarint = require('./varint-table');\nvar util = require('./util');\nexports = module.exports;\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.addPrefix = function (multicodecStrOrCode, data) {\n  var prefix;\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode);\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n  return Buffer.concat([prefix, data]);\n};\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.rmPrefix = function (data) {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n};\n\n/**\n * Get the codec of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {string}\n */\nexports.getCodec = function (prefixedData) {\n  var code = varint.decode(prefixedData);\n  var codecName = intTable.get(code);\n  if (codecName === undefined) {\n    throw new Error(\"Code \".concat(code, \" not found\"));\n  }\n  return codecName;\n};\n\n/**\n * Get the name of the codec.\n * @param {number} codec\n * @returns {string}\n */\nexports.getName = function (codec) {\n  return intTable.get(codec);\n};\n\n/**\n * Get the code of the codec\n * @param {string} name\n * @returns {number}\n */\nexports.getNumber = function (name) {\n  var code = codecNameToCodeVarint[name];\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found');\n  }\n  return util.varintBufferDecode(code)[0];\n};\n\n/**\n * Get the code of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {number}\n */\nexports.getCode = function (prefixedData) {\n  return varint.decode(prefixedData);\n};\n\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Buffer}\n */\nexports.getCodeVarint = function (codecName) {\n  var code = codecNameToCodeVarint[codecName];\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found');\n  }\n  return code;\n};\n\n/**\n * Get the varint of a code.\n * @param {Number} code\n * @returns {Array.<number>}\n */\nexports.getVarint = function (code) {\n  return varint.encode(code);\n};\n\n// Make the constants top-level constants\nvar constants = require('./constants');\nObject.assign(exports, constants);\n\n// Human friendly names for printing, e.g. in error messages\nexports.print = require('./print');","map":{"version":3,"names":["_require","require","Buffer","varint","intTable","codecNameToCodeVarint","util","exports","module","addPrefix","multicodecStrOrCode","data","prefix","isBuffer","varintBufferEncode","Error","concat","rmPrefix","decode","slice","bytes","getCodec","prefixedData","code","codecName","get","undefined","getName","codec","getNumber","name","varintBufferDecode","getCode","getCodeVarint","getVarint","encode","constants","Object","assign","print"],"sources":["C:/Users/acer08022023/desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/cids/node_modules/multicodec/src/index.js"],"sourcesContent":["/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst varint = require('varint')\nconst intTable = require('./int-table')\nconst codecNameToCodeVarint = require('./varint-table')\nconst util = require('./util')\n\nexports = module.exports\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix\n\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode)\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n  return Buffer.concat([prefix, data])\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.rmPrefix = (data) => {\n  varint.decode(data)\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {string}\n */\nexports.getCodec = (prefixedData) => {\n  const code = varint.decode(prefixedData)\n  const codecName = intTable.get(code)\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`)\n  }\n  return codecName\n}\n\n/**\n * Get the name of the codec.\n * @param {number} codec\n * @returns {string}\n */\nexports.getName = (codec) => {\n  return intTable.get(codec)\n}\n\n/**\n * Get the code of the codec\n * @param {string} name\n * @returns {number}\n */\nexports.getNumber = (name) => {\n  const code = codecNameToCodeVarint[name]\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found')\n  }\n  return util.varintBufferDecode(code)[0]\n}\n\n/**\n * Get the code of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {number}\n */\nexports.getCode = (prefixedData) => {\n  return varint.decode(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Buffer}\n */\nexports.getCodeVarint = (codecName) => {\n  const code = codecNameToCodeVarint[codecName]\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found')\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n * @param {Number} code\n * @returns {Array.<number>}\n */\nexports.getVarint = (code) => {\n  return varint.encode(code)\n}\n\n// Make the constants top-level constants\nconst constants = require('./constants')\nObject.assign(exports, constants)\n\n// Human friendly names for printing, e.g. in error messages\nexports.print = require('./print')\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAAA,QAAA,GAAmBC,OAAO,CAAC,QAAQ,CAAC;EAA5BC,MAAM,GAAAF,QAAA,CAANE,MAAM;AACd,IAAMC,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,IAAMG,QAAQ,GAAGH,OAAO,CAAC,aAAa,CAAC;AACvC,IAAMI,qBAAqB,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;AACvD,IAAMK,IAAI,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAE9BM,OAAO,GAAGC,MAAM,CAACD,OAAO;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,OAAO,CAACE,SAAS,GAAG,UAACC,mBAAmB,EAAEC,IAAI,EAAK;EACjD,IAAIC,MAAM;EAEV,IAAIV,MAAM,CAACW,QAAQ,CAACH,mBAAmB,CAAC,EAAE;IACxCE,MAAM,GAAGN,IAAI,CAACQ,kBAAkB,CAACJ,mBAAmB,CAAC;EACvD,CAAC,MAAM;IACL,IAAIL,qBAAqB,CAACK,mBAAmB,CAAC,EAAE;MAC9CE,MAAM,GAAGP,qBAAqB,CAACK,mBAAmB,CAAC;IACrD,CAAC,MAAM;MACL,MAAM,IAAIK,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACF;EACA,OAAOb,MAAM,CAACc,MAAM,CAAC,CAACJ,MAAM,EAAED,IAAI,CAAC,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACU,QAAQ,GAAG,UAACN,IAAI,EAAK;EAC3BR,MAAM,CAACe,MAAM,CAACP,IAAI,CAAC;EACnB,OAAOA,IAAI,CAACQ,KAAK,CAAChB,MAAM,CAACe,MAAM,CAACE,KAAK,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAb,OAAO,CAACc,QAAQ,GAAG,UAACC,YAAY,EAAK;EACnC,IAAMC,IAAI,GAAGpB,MAAM,CAACe,MAAM,CAACI,YAAY,CAAC;EACxC,IAAME,SAAS,GAAGpB,QAAQ,CAACqB,GAAG,CAACF,IAAI,CAAC;EACpC,IAAIC,SAAS,KAAKE,SAAS,EAAE;IAC3B,MAAM,IAAIX,KAAK,SAAAC,MAAA,CAASO,IAAI,gBAAa;EAC3C;EACA,OAAOC,SAAS;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAjB,OAAO,CAACoB,OAAO,GAAG,UAACC,KAAK,EAAK;EAC3B,OAAOxB,QAAQ,CAACqB,GAAG,CAACG,KAAK,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACArB,OAAO,CAACsB,SAAS,GAAG,UAACC,IAAI,EAAK;EAC5B,IAAMP,IAAI,GAAGlB,qBAAqB,CAACyB,IAAI,CAAC;EACxC,IAAIP,IAAI,KAAKG,SAAS,EAAE;IACtB,MAAM,IAAIX,KAAK,CAAC,SAAS,GAAGe,IAAI,GAAG,aAAa,CAAC;EACnD;EACA,OAAOxB,IAAI,CAACyB,kBAAkB,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAhB,OAAO,CAACyB,OAAO,GAAG,UAACV,YAAY,EAAK;EAClC,OAAOnB,MAAM,CAACe,MAAM,CAACI,YAAY,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAf,OAAO,CAAC0B,aAAa,GAAG,UAACT,SAAS,EAAK;EACrC,IAAMD,IAAI,GAAGlB,qBAAqB,CAACmB,SAAS,CAAC;EAC7C,IAAID,IAAI,KAAKG,SAAS,EAAE;IACtB,MAAM,IAAIX,KAAK,CAAC,SAAS,GAAGS,SAAS,GAAG,aAAa,CAAC;EACxD;EACA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAhB,OAAO,CAAC2B,SAAS,GAAG,UAACX,IAAI,EAAK;EAC5B,OAAOpB,MAAM,CAACgC,MAAM,CAACZ,IAAI,CAAC;AAC5B,CAAC;;AAED;AACA,IAAMa,SAAS,GAAGnC,OAAO,CAAC,aAAa,CAAC;AACxCoC,MAAM,CAACC,MAAM,CAAC/B,OAAO,EAAE6B,SAAS,CAAC;;AAEjC;AACA7B,OAAO,CAACgC,KAAK,GAAGtC,OAAO,CAAC,SAAS,CAAC"},"metadata":{},"sourceType":"script"}