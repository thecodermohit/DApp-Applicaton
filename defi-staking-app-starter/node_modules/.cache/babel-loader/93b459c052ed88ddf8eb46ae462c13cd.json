{"ast":null,"code":"/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n * @module Multibase\n */\n'use strict';\n\nvar _require = require('buffer'),\n  Buffer = _require.Buffer;\nvar constants = require('./constants');\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.names = Object.freeze(Object.keys(constants.names));\nexports.codes = Object.freeze(Object.keys(constants.codes));\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be prefixed with multibase.\n * @memberof Multibase\n * @returns {Buffer}\n */\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer');\n  }\n  var base = getBase(nameOrCode);\n  var codeBuf = Buffer.from(base.code);\n  var name = base.name;\n  validEncode(name, buf);\n  return Buffer.concat([codeBuf, buf]);\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be encoded.\n * @returns {Buffer}\n * @memberof Multibase\n */\nfunction encode(nameOrCode, buf) {\n  var base = getBase(nameOrCode);\n  var name = base.name;\n  return multibase(name, Buffer.from(base.encode(buf)));\n}\n\n/**\n * Takes a buffer or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Buffer|string} bufOrString\n * @returns {Buffer}\n * @memberof Multibase\n *\n */\nfunction decode(bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString();\n  }\n  var code = bufOrString.substring(0, 1);\n  bufOrString = bufOrString.substring(1, bufOrString.length);\n  if (typeof bufOrString === 'string') {\n    bufOrString = Buffer.from(bufOrString);\n  }\n  var base = getBase(code);\n  return Buffer.from(base.decode(bufOrString.toString()));\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Buffer|string} bufOrString\n * @returns {boolean}\n * @memberof Multibase\n */\nfunction isEncoded(bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString();\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(bufOrString) !== '[object String]') {\n    return false;\n  }\n  var code = bufOrString.substring(0, 1);\n  try {\n    var base = getBase(code);\n    return base.name;\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * @param {string} name\n * @param {Buffer} buf\n * @private\n * @returns {undefined}\n */\nfunction validEncode(name, buf) {\n  var base = getBase(name);\n  base.decode(buf.toString());\n}\nfunction getBase(nameOrCode) {\n  var base;\n  if (constants.names[nameOrCode]) {\n    base = constants.names[nameOrCode];\n  } else if (constants.codes[nameOrCode]) {\n    base = constants.codes[nameOrCode];\n  } else {\n    throw new Error('Unsupported encoding');\n  }\n  if (!base.isImplemented()) {\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet');\n  }\n  return base;\n}","map":{"version":3,"names":["_require","require","Buffer","constants","exports","module","multibase","encode","decode","isEncoded","names","Object","freeze","keys","codes","nameOrCode","buf","Error","base","getBase","codeBuf","from","code","name","validEncode","concat","bufOrString","isBuffer","toString","substring","length","prototype","call","err","isImplemented"],"sources":["C:/Users/acer08022023/desktop/defi-staking-app-starter-main/defi-staking-app-starter/node_modules/multihashes/node_modules/multibase/src/index.js"],"sourcesContent":["/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n * @module Multibase\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst constants = require('./constants')\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.names = Object.freeze(Object.keys(constants.names))\nexports.codes = Object.freeze(Object.keys(constants.codes))\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be prefixed with multibase.\n * @memberof Multibase\n * @returns {Buffer}\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer')\n  }\n  const base = getBase(nameOrCode)\n  const codeBuf = Buffer.from(base.code)\n\n  const name = base.name\n  validEncode(name, buf)\n  return Buffer.concat([codeBuf, buf])\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be encoded.\n * @returns {Buffer}\n * @memberof Multibase\n */\nfunction encode (nameOrCode, buf) {\n  const base = getBase(nameOrCode)\n  const name = base.name\n\n  return multibase(name, Buffer.from(base.encode(buf)))\n}\n\n/**\n * Takes a buffer or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Buffer|string} bufOrString\n * @returns {Buffer}\n * @memberof Multibase\n *\n */\nfunction decode (bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString()\n  }\n\n  const code = bufOrString.substring(0, 1)\n  bufOrString = bufOrString.substring(1, bufOrString.length)\n\n  if (typeof bufOrString === 'string') {\n    bufOrString = Buffer.from(bufOrString)\n  }\n\n  const base = getBase(code)\n  return Buffer.from(base.decode(bufOrString.toString()))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Buffer|string} bufOrString\n * @returns {boolean}\n * @memberof Multibase\n */\nfunction isEncoded (bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString()\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(bufOrString) !== '[object String]') {\n    return false\n  }\n\n  const code = bufOrString.substring(0, 1)\n  try {\n    const base = getBase(code)\n    return base.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * @param {string} name\n * @param {Buffer} buf\n * @private\n * @returns {undefined}\n */\nfunction validEncode (name, buf) {\n  const base = getBase(name)\n  base.decode(buf.toString())\n}\n\nfunction getBase (nameOrCode) {\n  let base\n\n  if (constants.names[nameOrCode]) {\n    base = constants.names[nameOrCode]\n  } else if (constants.codes[nameOrCode]) {\n    base = constants.codes[nameOrCode]\n  } else {\n    throw new Error('Unsupported encoding')\n  }\n\n  if (!base.isImplemented()) {\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet')\n  }\n\n  return base\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}